import logging
import re
from typing import Optional

from fastapi import Depends

from inventory_management_system_api.models.system import SystemIn, SystemOut
from inventory_management_system_api.repositories.system import SystemRepo
from inventory_management_system_api.schemas.system import SystemPostRequestSchema

logger = logging.getLogger()


class SystemService:
    """
    Service for managing Systems
    """

    def __init__(self, system_repository: SystemRepo = Depends(SystemRepo)) -> None:
        """
        Initialise the `SystemService` with a `SystemRepo` repository

        :param system_repository: `SystemRepo` repository to use
        """
        self._system_repository = system_repository

    def create(self, system: SystemPostRequestSchema) -> SystemOut:
        """
        Create a new System

        :param system: System to be created
        :return: Created System
        """
        parent_id = system.parent_id
        parent_system = self.get(parent_id) if parent_id else None
        parent_path = parent_system.path if parent_system else "/"

        code = self._generate_code(system.name)
        path = self._generate_path(parent_path, code)
        return self._system_repository.create(
            SystemIn(
                name=system.name,
                location=system.location,
                owner=system.owner,
                importance=system.importance,
                code=code,
                path=path,
                parent_path=parent_path,
                parent_id=parent_id,
            )
        )

    def get(self, system_id: str) -> Optional[SystemOut]:
        """
        Retrieve a System by its ID

        :param system_id: ID of the System to retrieve
        :return: Retrieved System or `None` if not found
        """
        return self._system_repository.get(system_id)

    def list(self, path: Optional[str], parent_path: Optional[str]) -> list[SystemOut]:
        """
        Retrieve Systems based on the provided filters

        :param path: Path to filter Systems by
        :param parent_path: Parent path to filter Systems by
        :return: List of System's or an empty list if no Systems are retrieved
        """
        return self._system_repository.list(path, parent_path)

    # TODO: Move these to a common place as duplicated from catalogue_category
    def _generate_code(self, name: str) -> str:
        """
        Generate a code for a catalogue category based on its name. This is used to maintain uniqueness and prevent
        duplicate subcategories within a category.

        The code is generated by converting the name to lowercase and replacing spaces with hyphens. Leading and
        trailing spaces are removed, and consecutive spaces are replaced with a single hyphen.

        :param name: The name of the catalogue category.
        :return: The generated code for the catalogue category.
        """
        logger.info("Generating code for the catalogue category based on its name")
        name = name.lower().strip()
        return re.sub(r"\s+", "-", name)

    def _generate_path(self, parent_path: str, code: str) -> str:
        """
        Generate a path for a catalogue category based on its code and the path from its parent.

        :param parent_path: The path of the parent catalogue category.
        :param code: The code of the catalogue category.
        :return: The generated path for the catalogue category.
        """
        logger.info("Generating path for the catalogue category")
        return f"{parent_path}{code}" if parent_path.endswith("/") else f"{parent_path}/{code}"
